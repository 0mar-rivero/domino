@using System.Text.RegularExpressions
@using System.Reflection

<div class="col-6 border-bottom p-2 mt-2">
	<h3>DealerSelector</h3>
	<select class="form-select" style="width: min(max(25%, 700px), 100%); border-radius: 50px" @bind="@SelectedId">
		@foreach (var (id,(name,_)) in DealerDictionary) {
			<option value="@id">@name</option>
		}
	</select>
	<btn class="btn btn-success mt-2 mb-2 align-self-md-center" @onclick="@(AddDealer)" style="border-radius: 50px">CreateNew</btn><br/>
	<input class="mt-2" type="number" style="border-radius: 50px; width: min(max(10%, 50px),100%)" @bind="@_totalTokens"> <span>@(_additionalParamName1.Space())</span><br/>
	<input class="mt-2" type="number" style="border-radius: 50px; width: min(max(10%, 50px),100%)" @bind="@_tokensPerHand"> <span>@(_additionalParamName2.Space())</span>

</div>

@code {
	private string _additionalParamName1 = "";
	private string _additionalParamName2 = "";
	private int _tokensPerHand = 10;
	private int _totalTokens = 55;
	private ConstructorInfo? _constructorInfo;
	private int _selectedId;

	private int SelectedId {
		get => _selectedId;
		set {
			_selectedId = value;
			if (!DealerDictionary.IsEmpty()) GlobalState.Dealer = DealerDictionary[SelectedId].dealer;
		}
	}

	[Parameter, EditorRequired]
	public Dictionary<int, (string name, IDealer<int> dealer)> DealerDictionary { get; set; } = new();

	// [Parameter, EditorRequired]
	// public EventCallback<IDealer<TDominoType>> DealerSetter { get; set; }


	protected override void OnInitialized() {
		base.OnInitialized();
		SelectedId = DealerDictionary.Keys.FirstOrDefault();
		AdditionalParamValueUpdate();
		if (!DealerDictionary.IsEmpty()) GlobalState.Dealer = DealerDictionary[SelectedId].dealer;
	}

	private void AddDealer() {
		object[] args = { _totalTokens, _tokensPerHand };
		var dealer = (IDealer<int>)_constructorInfo.Invoke(args);
		DealerDictionary.Add(dealer.GetHashCode(), (new Regex(@"\((\d+)\)\s\((\d+)\)$").Replace(DealerDictionary[SelectedId].name, $"({_totalTokens}) ({_tokensPerHand})"), dealer));
		SelectedId = dealer.GetHashCode();
	}

	void AdditionalParamValueUpdate() {
		if (DealerDictionary.IsEmpty()) return;
		_constructorInfo = DealerDictionary[SelectedId].dealer.GetType().GetConstructor(new[] { typeof(int), typeof(int) });
		(_additionalParamName1,_additionalParamName2) = (_constructorInfo?.GetParameters()[0].Name, _constructorInfo?.GetParameters()[1].Name);
		var match = new Regex(@"\((\d+)\)\s\((\d+)\)$").Match(DealerDictionary[SelectedId].name);
		(_totalTokens, _tokensPerHand) = match.Success ? (int.Parse(match.Groups[1].Value),int.Parse(match.Groups[2].Value)) : (0,0);
	}

}