@using MyDominoPwa.DominoModel

<h1>Game!!!</h1>
<div class="border-bottom m-4">
	@if (!_isGameOver) {
		<span>Turno: @(GlobalState.State.Turn)</span>
		<br/>
		if (GlobalState.State.Turn is not -1) {
			<span>Player: @(GlobalState.State.PlayerToPlay.ToString())</span>
			@if (GlobalState.State.Board.Last().Check) {
				<span> se pasó por mayoneso</span>
			} else {
				<span> jugó, que crack!!!</span>
			}
			<br/>
		}
		<button class="btn btn-success m-2" @onclick="@NextMove">Next Turn</button>
	} else {
		<h3>Ganó el team fritura(@string.Join(", ", GlobalState.Game.Winner().FirstOrDefault())).</h3>
		<button class="btn btn-success m-2" @onclick="@NextGame">Next Game</button>
	}
</div>
<div class="container" style="align-content: center;width: 100%;height: 100%">
	<table style="margin:0;position: relative;">
		<tr>
			@if (GlobalState.State.Turn is not -1) {
				<Row Branch="@(new DualBoardTree<int>(GlobalState.State).LeftChild)" Inverted="@true"></Row>
				<Row Branch="@(new DualBoardTree<int>(GlobalState.State).RightChild)"></Row>
			}
		</tr>
	</table>
</div>
<div class="border p-2" style="background-color: azure">
	<table style="margin:0;position: relative;">
		@foreach (var (player,hand) in GlobalState.State.Hands) {
			<tr>
				<td>
					<h3>@player.ToString()</h3>
				</td>
				@foreach (var token in hand) {
					<td>
						<Token First="@token.Head.ToString()" Second="@token.Tail.ToString()" IsDouble="@true"></Token>
					</td>
				}

			</tr>
		}

	</table>
</div>

@code {
	IEnumerator<Game<int>> _tournamentEnumerator;
	IEnumerator<GameState<int>> _gameEnumerator;
	private bool _isGameOver;
	private bool _isTournamentOver;

	void NextMove() {
		if (_gameEnumerator.MoveNext())
			GlobalState.State = _gameEnumerator.Current;
		else {
			_isGameOver = true;
		}
	}

	void NextGame() {
		if (_tournamentEnumerator.MoveNext()) {
			_isGameOver = false;
			GlobalState.Game = _tournamentEnumerator.Current;
			_gameEnumerator = GlobalState.Game.GetEnumerator();
			if (_gameEnumerator.MoveNext() && _gameEnumerator.MoveNext()) {
				GlobalState.State = _gameEnumerator.Current;
			} else {
				_isTournamentOver = true;
			}
		}
	}

	protected override void OnInitialized() {
		base.OnInitialized();
		if (GlobalState.Started) {
			_tournamentEnumerator = GlobalState.Enumerator;
			_gameEnumerator = GlobalState.GameEnumerator;
			return;
		}
		_tournamentEnumerator = GlobalState.Tournament.GetEnumerator();
		GlobalState.Enumerator = _tournamentEnumerator;
		if (_tournamentEnumerator.MoveNext()) {
			GlobalState.Game = _tournamentEnumerator.Current;
		}
		_gameEnumerator = GlobalState.Game.GetEnumerator();
		GlobalState.GameEnumerator = _gameEnumerator;
		if (_gameEnumerator.MoveNext()) {
			GlobalState.State = _gameEnumerator.Current;
		}
		GlobalState.Started = true;
	}

}